¿Que es un ORM (Object Relational Model)?
Un ORM es un modelo de programación que permite mapear las estructuras de una base de datos relacionales.
Al abstraer este tipo de programación, delegamos su implementación al backend, es decir, le añadimos una de responsabilidad a la capa transaccional del servidor: Los beneficios son los siguientes:
- Acciones como CRUD (Create, Read, Update, Delete) son administradas mediante ORM.
- La implementación de seeds o semillas, nos permiten recuperar, mediante código, la estructura de una BD.
Una de las bases teóricas para entender este modelo es mediante el conocimiento de DAO (Data Access Object) y DTO (Data Transfer Object), los cuales nos permiten desestructurar un ORM en módulos de abstracción para acceder a la DB y transferir datos desde la misma DB, respectivamente hablando.
Las contras sería:
- Delegación de responsabilidades al server
- Descentralización de trabajo, directa, de una BD.

pasos:
hay que instalar sequelize con el siguiete comando:
npm install --save sequelize

luego instalamos los driver que se necesita para la base de datos que se va a ocupar, en este caso postgres con el siguiente comando.
npm install --save pg pg-hstore

creamos un archivo dentro de las librerias llamada sequelize.js
y agregamos los siguientes datos.


------------------------
¿Como esta estructurado nuestro proyecto?

Hice este diagrama para entender mejor como funciona el flujo de operaciones dentro de nuestro Backend con Node JS. Utilizamos Express.js para el routing, Sequelize como ORM y PostgreSQL como base de datos.

En resumen:
- El frontend envía datos a la API con un verbo HTTP.
- El router (cuyas rutas de API diseñamos usando Express.js) recibe los datos y los verifica usando un Middleware de validación.
- Si todo está bien, el router llama a los servicios.
- Los servicios usan un método de POO incluido en la ORM para ejecutar una acción con la DB.
- La ORM traduce a SQL para comunicarse con la DB.
- La respuesta de la DB se propaga hasta llegar al router.
- El router detecta si es un error y llama a un Middleware de gestión de errores (aquí usamos el paquete boom).
- La respuesta, exitosa o de error se envía como respuesta al Frontend. Y así es como está funcionando nuestro backend hasta el momento!!

---------------------------
Las migraciones son:
- Las migraciones son la forma en que Django propaga cambios en los modelos y los refleja en el esquema de bases de datos. - Django.
- Las migraciones son como un sistema de control de versiones para la base de datos. - Laravel.
- Es como un sistema de control de versiones para manejar los cambios desde el código y trackear los cambios en la base de datos. - Sequelize.

Básicamente, las migraciones mantienen el historial del esquema que se lleva en la base de datos. Es un sistema muy usado en ambientes de producción para trackear los cambios sin tener que replicar todo nuevamente (creación de tablas, llaves foráneas, etc). Es decir, permite saber en qué punto estaba para saber qué es lo que se tiene que modificar.

--

sequelize.sync() empieza a leer los modelos, crea tablas y hace relist (se sobrescribe información), no se aconseja que se corra en producción. Es mejor sincronizar con un sistema de migraciones.

Para correr migraciones se utiliza la librería sequelize-cli y se instala como dependencia de desarrollo con el comando npm i sequelize-cli -D.
Posteriormente, se crea un archivo de configuración .sequelizerc en la carpeta principal.

Configuración de Sequelize CLI para Migraciones
Sequelize proporciona una librería llamada sequelize-cli que facilita la gestión de migraciones. A continuación, se detallan los pasos para configurarla correctamente:
Instalación de sequelize-cli
Para instalar sequelize-cli como dependencia de desarrollo, utiliza el siguiente comando:
- npm i sequelize-cli --save-dev

Luego, creamos y configuramos el archivo .sequelizerc
En la raíz de tu proyecto, crea un archivo llamado .sequelizerc. Este archivo define las rutas de configuración, modelos, migraciones y seeders para Sequelize.
Agrega el siguiente código al archivo .sequelizerc:

module.export = {
  "config": "./db/config.js",
  "models-path": "./db/models/",
  "migrations-path": "./db/migrations/",
  "seeders-path": "./db/seeders/",
};

Configuración de la conexión en config.js
Crea un archivo llamado config.js en la carpeta especificada (por ejemplo, ./db/). Este archivo contendrá la configuración para conectarse a la base de datos.
El contenido del archivo config.js puede ser el siguiente:

const { config } = require('./../config/config');
const USER = encodeURIComponent(config.dbUser);
const PASSWORD = encodeURIComponent(config.dbPassword);

const URI = `postgres://${USER}:${PASSWORD}@${config.dbHost}:${config.dbPort}/${config.dbName}`;

module.exports = {
  development: {
    url: URI,
    dialect: 'postgres', // esta es la conexion a postgres
  },
  production: {
    url: URI,
    dialect: 'postgres', // esta es la conexion a postgres
  },
};

Descripción del código
- development: Configuración para el entorno de desarrollo.
- production: Configuración para el entorno de producción.
- url: La URI de conexión generada dinámicamente utilizando las credenciales del archivo de configuración.
- dialect: Especifica el tipo de base de datos que estás utilizando (en este caso, PostgreSQL).

Notas adicionales
1. Asegúrate de tener las credenciales correctas en tu archivo de configuración principal (./config/config.js).
2. Si utilizas otra base de datos (por ejemplo, MySQL), reemplaza postgres por el dialecto correspondiente (por ejemplo, mysql).
3. Para ejecutar las migraciones, utiliza el comando:
npx sequelize-cli db:migrate
4. Si necesitas revertir una migración:
npx sequelize-cli db:migrate:undo

Generar Boilerplate para Migraciones

Para configurar el entorno de migraciones en un proyecto con Sequelize, sigue estos pasos:

1. Agregar el script para generar migraciones:
Incluye la siguiente línea en el archivo package.json, dentro del bloque scripts:

"migrations:generate": "sequelize-cli migrations:generate --name"

2. Ejecutar el comando para crear una nueva migración:
Usa el siguiente comando en la terminal:
npm run migrations:generate [name]
Donde [name] es el nombre de la migración (por ejemplo: create-users-table).

3. Ubicación de las migraciones:
Las migraciones generadas se guardarán en una carpeta previamente configurada, por ejemplo: db/migrations.

4. Crear manualmente el contenido de la migración:
A continuación, se muestra un ejemplo de una migración para crear una tabla:

'use strict';

const { UserSchema, USER_TABLE } = require('./../models/user.model');

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  // Crea la tabla definida en el modelo.
  async up(queryInterface, Sequelize) {
    await queryInterface.createTable(USER_TABLE, UserSchema);
  },

  // Elimina la tabla al revertir la migración.
  async down(queryInterface, Sequelize) {
    await queryInterface.dropTable(USER_TABLE);
  },
};

// Nota: Este archivo puede incluir migraciones para múltiples modelos, si es necesario.

5. Agregar un script para ejecutar las migraciones:
En el archivo package.json, incluye el siguiente script:
"migrations:run": "sequelize-cli db:migrate"

6. Ejecutar las migraciones:
Una vez configurado, utiliza el siguiente comando para aplicar las migraciones:
npm run migrations:run

7. Agregar un script para revertir las migraciones:
En el archivo package.json, incluye el siguiente script:
"migrations:revert": "sequelize-cli db:migrate:undo"

8. Revertir las migraciones:
Una vez configurado, utiliza el siguiente comando para aplicar las migraciones:
npm run migrations:revert

9. Agregar un script para vaciar todas las migraciones:
En el archivo package.json, incluye el siguiente script:
"migrations:delete": "sequelize-cli db:migrate:undo:all"

10. Vacia todas las migraciones:
Una vez configurado, utiliza el siguiente comando para aplicar las migraciones:
npm run migrations:delete


con el siguiente comando creamos la nueva migración para el alter table con el role
npm run migrations:generate add-role

------------------------------------------

Creación y Migración de Customer en un Proyecto Node.js
1. Crear el Modelo customer.model.js:
- Ubica el archivo en la carpeta bd/models.
- Define el esquema del modelo y las propiedades necesarias.

2. Registrar el Modelo en index.js:
- Dentro de la carpeta bd/models, importa y registra el modelo en el archivo index.js.

3. Crear el Servicio de Customer:
- Genera un archivo de servicio, por ejemplo, customer.service.js.
- Implementa los métodos necesarios para interactuar con la base de datos (CRUD).

4. Generar la Migración Inicial:
- Una vez configurado todo, genera la migración con el siguiente comando:
* npm run migrations:generate create-customer

5. Actualizar la Base de Datos con Cambios en el Modelo:
- Si necesitas agregar un cambio en la base de datos, como hacer que un campo sea único, modifica el modelo. Por ejemplo:

userId: {
  field: 'user_id',
  allowNull: false,
  type: DataTypes.INTEGER,
  unique: true,
  references: {
    model: USER_TABLE,
    key: 'id',
  },
  onUpdate: 'CASCADE',
  onDelete: 'SET NULL',
},
- Este cambio configura la columna userId para ser única, además de establecer relaciones y reglas de actualización/eliminación.

6. Generar la Migración para el Cambio:
- Genera una nueva migración para reflejar los cambios realizados en el modelo:
* npm run migrations:generate update-customer-add-unique-userId

7. Ejecutar las Migraciones:
- Después de generar las migraciones, aplícalas para que los cambios sean efectivos en la base de datos:
* npm run migrations:run

Nota Adicional:
- Si necesitas modificar una columna existente (como en este caso), asegúrate de reflejar el cambio tanto en el modelo como en la migración correspondiente.

Este flujo te asegura una correcta sincronización entre tu modelo, migraciones y la base de datos.
